---
description: 
globs: 
alwaysApply: true
---
# Policy and Permission Guidelines

## Overview

This document outlines the best practices for handling authorization in Save Workbench using Laravel Policies and Spatie Laravel Permission v6.17+.

## Key Principles

1. **Resource-based Permissions**: All permissions follow the format `action_resource` (e.g., `view_vehicles`, `edit_users`).
2. **Role Hierarchy**: Roles are clearly separated between central application roles and tenant-specific roles.
3. **Tenant Data Isolation**: Policies enforce that tenant users can only access data within their tenant.
4. **Base Policy**: All policies extend the `BasePolicy` which provides standardized permission checks using `$permissionPrefix`.
5. **Gate Super Admin Override**: Super admins automatically pass all permission checks via a `Gate::before` rule.
6. **Policies as Source of Truth**: Policies define *what* a user is allowed to do. They are the central point for authorization logic and are utilized by both controllers (via `\$this->authorizeResource` or `\$this->authorize`) and by Actions (via `$request->user()->can()` within their `authorize` method).

## Permission Structure

### Actions

Permissions are organized by these standard actions:

- `view_*`: Ability to view/list resources
- `create_*`: Ability to create new resources
- `edit_*`: Ability to modify existing resources
- `delete_*`: Ability to delete resources

### Resources

Each model has a corresponding set of permissions managed by `PermissionSeeder`:

```php
$resources = [
    'users', 'tenants', 'tenant_users', 'vehicles', 'devices', 
    'drivers', 'groups', 'device_types', 'vehicle_types', 
    'vehicle_brands', 'vehicle_models', 'global_settings'
];
```

## Role Structure

### Central Roles

- **super_admin**: Full system access with no restrictions (automatic Gate::before bypass)
- **central_admin**: Administrative access to most functionality except critical operations
- **central_user**: Limited view-only access to central application

### Tenant Roles

- **tenant_admin**: Full access to all tenant-specific resources
- **tenant_manager**: Can manage most tenant resources but with some restrictions
- **tenant_user**: Standard user with limited editing capabilities
- **tenant_viewer**: View-only access to tenant resources

## Implementing Policies

### 1. Base Policy Extension

All policies should extend `App\Policies\BasePolicy`:

```php
class VehiclePolicy extends BasePolicy
{
    protected string $permissionPrefix = 'vehicles';
    
    // BasePolicy provides standard methods:
    // viewAny, view, create, update, delete, restore, forceDelete
    
    // Override only when different behavior is needed
    public function update(User $user, Vehicle $vehicle): bool
    {
        // Custom logic for updates
        if ($user->tenant_id && $vehicle->tenant_id !== $user->tenant_id) {
            return false;
        }
        
        return parent::update($user, $vehicle);
    }
}
```

### 2. Tenant-Aware Policies

For tenant-scoped resources, always implement tenant isolation:

```php
public function view(User $user, Vehicle $vehicle): bool
{
    // Tenant users can only view vehicles in their tenant
    if ($user->tenant_id && $vehicle->tenant_id !== $user->tenant_id) {
        return false;
    }
    
    // Central users (non-tenant) can view all vehicles subject to permissions
    return parent::view($user, $vehicle);
}
```

### 3. Special Resource Checks

Implement business logic constraints:

```php
public function delete(User $user, User $targetUser): bool
{
    // Users cannot delete themselves
    if ($user->id === $targetUser->id) {
        return false;
    }
    
    return parent::delete($user, $targetUser);
}
```

## Controller Usage (for Display Logic)

### Resource Authorization

Use `authorizeResource` in controller constructors for standard CRUD views:

```php
public function __construct()
{
    $this->authorizeResource(Vehicle::class, 'vehicle');
}
```

This automatically maps:
- `index` → `viewAny`
- `show` → `view`
- `create`, `edit` → `create`, `update`

### Custom Authorization

For non-standard methods, use explicit authorization:

```php
public function dashboard()
{
    $this->authorize('view_dashboard');
    
    // Dashboard logic
}
```

## Action Usage (for CUD and Business Logic)

### Authorization within Actions

Each Action class should implement an `authorize` method:

```php
use Lorisleiva\Actions\ActionRequest;

public function authorize(ActionRequest $request, Vehicle $vehicle = null): bool
{
    if ($vehicle) {
        return $request->user()->can('update', $vehicle);
    }
    
    return $request->user()->can('create', Vehicle::class);
}
```

The `AsAction` trait automatically calls this method before executing the action.

### Action Organization

Actions are organized by feature/module:

```
app/Actions/
├── Vehicles/
│   ├── CreateVehicleAction.php
│   ├── UpdateVehicleAction.php
│   └── DeleteVehicleAction.php
├── Devices/
│   ├── CreateDeviceAction.php
│   └── ProcessDeviceMessageAction.php
└── DataPoints/
    ├── GetVehicleDataPointsAction.php
    └── GetDeviceDataPointsAction.php
```

## Policy Registration

Register policies in `AuthServiceProvider::$policies`:

```php
protected $policies = [
    Vehicle::class => VehiclePolicy::class,
    Device::class => DevicePolicy::class,
    Driver::class => DriverPolicy::class,
    // etc.
];
```

## Permission Seeding

### PermissionSeeder Structure

The seeder automatically creates permissions for all resources:

```php
private function createResourcePermissions(): void
{
    $resources = [
        'users', 'tenants', 'tenant_users', 'vehicles', 'devices', 
        'drivers', 'groups', 'device_types', 'vehicle_types', 
        'vehicle_brands', 'vehicle_models', 'global_settings'
    ];
    
    $actions = ['view', 'create', 'edit', 'delete'];
    
    foreach ($resources as $resource) {
        foreach ($actions as $action) {
            Permission::firstOrCreate(['name' => "{$action}_{$resource}"]);
        }
    }
}
```

### Role Assignment

Roles are assigned permissions based on their level:

```php
private function assignPermissionsToRoles(): void
{
    // Super admin gets all permissions automatically via Gate::before
    
    $centralAdmin = Role::findByName('central_admin');
    $centralAdmin->givePermissionTo([
        'view_tenants', 'create_tenants', 'edit_tenants',
        'view_global_settings', 'edit_global_settings',
        // etc.
    ]);
    
    $tenantAdmin = Role::findByName('tenant_admin');
    $tenantAdmin->givePermissionTo([
        'view_vehicles', 'create_vehicles', 'edit_vehicles', 'delete_vehicles',
        'view_devices', 'create_devices', 'edit_devices', 'delete_devices',
        // etc.
    ]);
}
```

## Testing Policies

### Comprehensive Policy Tests

Test all policy methods for each role:

```php
public function test_tenant_admin_can_manage_vehicles_in_their_tenant()
{
    $tenant = Tenant::factory()->create();
    $user = User::factory()->create(['tenant_id' => $tenant->id]);
    $user->assignRole('tenant_admin');
    
    $vehicle = Vehicle::factory()->create(['tenant_id' => $tenant->id]);
    
    $this->assertTrue($user->can('view', $vehicle));
    $this->assertTrue($user->can('update', $vehicle));
    $this->assertTrue($user->can('delete', $vehicle));
}

public function test_tenant_users_cannot_access_other_tenant_vehicles()
{
    $tenant1 = Tenant::factory()->create();
    $tenant2 = Tenant::factory()->create();
    
    $user = User::factory()->create(['tenant_id' => $tenant1->id]);
    $user->assignRole('tenant_admin');
    
    $vehicle = Vehicle::factory()->create(['tenant_id' => $tenant2->id]);
    
    $this->assertFalse($user->can('view', $vehicle));
    $this->assertFalse($user->can('update', $vehicle));
    $this->assertFalse($user->can('delete', $vehicle));
}
```

### Action Authorization Tests

Test that Actions respect policies:

```php
public function test_create_vehicle_action_requires_permission()
{
    $user = User::factory()->create();
    $user->assignRole('tenant_viewer'); // No create permission
    
    $action = new CreateVehicleAction();
    
    $this->expectException(AuthorizationException::class);
    
    $action->handle([
        'name' => 'Test Vehicle',
        'registration' => 'ABC123',
    ]);
}
```

## Adding New Resources

When adding a new resource:

1. **Add to PermissionSeeder**: Include in the `$resources` array
2. **Create Policy**: Extend `BasePolicy` with correct `$permissionPrefix`
3. **Register Policy**: Add to `AuthServiceProvider::$policies`
4. **Assign Permissions**: Configure in `PermissionSeeder::assignPermissionsToRoles()`
5. **Controller Authorization**: Use `$this->authorizeResource()` or manual authorization
6. **Action Authorization**: Implement `authorize()` method in Action classes
7. **Frontend Integration**: Use permission hooks in components
8. **Write Tests**: Cover all policy methods and edge cases

## Security Considerations

### Defense in Depth

- Always implement authorization at the policy level
- Controllers and Actions both check permissions
- Frontend guards provide UX but not security
- Tenant isolation is enforced in multiple layers

### Super Admin Caution

- Limit the number of super admin users
- Consider audit logging for sensitive operations
- Super admin bypass is implemented via `Gate::before()`

### Cache Considerations

- Permission cache can be reset with `sail artisan permission:cache-reset`
- Be aware of cache implications in tests
- Consider cache warming strategies for performance
