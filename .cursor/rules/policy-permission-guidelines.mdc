---
description: 
globs: 
alwaysApply: true
---
# Policy and Permission Guidelines

## Overview

This document outlines the best practices for handling authorization in Save Workbench using Laravel Policies and Spatie Laravel Permission.

## Key Principles

1. **Resource-based Permissions**: All permissions follow the format `action_resource` (e.g., `view_vehicles`, `edit_users`).
2. **Role Hierarchy**: Roles are clearly separated between central application roles and tenant-specific roles.
3. **Tenant Data Isolation**: Policies enforce that tenant users can only access data within their tenant.
4. **Base Policy**: All policies extend the `BasePolicy` which provides standardized permission checks.
5. **Gate Super Admin Override**: Super admins automatically pass all permission checks via a Gate::before rule.
6. **Policies as Source of Truth**: Policies define *what* a user is allowed to do. They are the central point for authorization logic and are utilized by both display-focused Controllers (via `\$this->authorizeResource` or `\$this->authorize`) and by task-focused Actions (via `$request->user()->can()` within their `authorize` method).

## Permission Structure

### Actions

Permissions are organized by these standard actions:

- `view_*`: Ability to view/list resources
- `create_*`: Ability to create new resources
- `edit_*`: Ability to modify existing resources
- `delete_*`: Ability to delete resources

### Resources

Each model has a corresponding set of permissions (e.g., vehicles, users, devices, etc.)

## Role Structure

### Central Roles

- **super_admin**: Full system access with no restrictions
- **central_admin**: Administrative access to most functionality except critical operations
- **central_user**: Limited view-only access to central application

### Tenant Roles

- **tenant_admin**: Full access to all tenant-specific resources
- **tenant_manager**: Can manage most tenant resources but with some restrictions
- **tenant_user**: Standard user with limited editing capabilities
- **tenant_viewer**: View-only access to tenant resources

## Implementing Policies

1. **Base Policy**:
   - All policies should extend `App\Policies\BasePolicy`
   - Override methods only when different behavior is needed

2. **Tenant-Aware Policies**:
   - Always check `$user->tenant_id` matches the model's `tenant_id` in tenant-scoped policies for tenant users.
   - Central users (non-tenant users) can typically access all resources regardless of tenant, subject to their roles and permissions.

3. **Special Checks**:
   - Implement special checks like preventing users from deleting themselves.
   - Consider resource relationships when determining access.

## Controller Usage (for Display Logic)

1. **Authorization Checks for Views**:
   - Use `$this->authorizeResource(Model::class, 'parameter_name')` in the controller's constructor for standard `index`, `show`, `create`, `edit` view methods.
   - For custom view methods in a controller requiring specific authorization, use `$this->authorize('policy_method', $model_or_class)`.
   - Remember, CUD (Create, Update, Delete) operations themselves are handled by Action classes, which perform their own authorization.

## Action Usage (for CUD and Business Logic)

1. **Authorization within Actions**:
   - Each Action class should define an `authorize(ActionRequest $request, ...)` method.
   - Inside this method, use `$request->user()->can('policy_method', $model_or_class)` to check permissions against the relevant policy.
   - The `AsAction` trait will automatically call this `authorize` method.
   - Refer to `laravel-actions-best-practices.mdc` and `applying-permissions.mdc` for detailed examples.

## Testing Policies

1. **Complete Test Coverage**:
   - Test each policy method for both positive and negative cases
   - Test with different roles to ensure correct permissions

2. **Tenant Isolation Testing**:
   - Verify that tenant users cannot access other tenants' data
   - Test cross-tenant scenarios to ensure proper isolation

3. **Special Conditions**:
   - Test edge cases and special conditions explicitly

## Security Considerations

1. **Defense in Depth**:
   - Always implement authorization at the controller level, even if also checked in the UI
   - Validate tenant access in policies, even if middleware also enforces tenant scoping

2. **Super Admin Caution**:
   - Avoid creating too many super admin users
   - Consider audit logging for sensitive operations by super admins

## Adding New Resources

When adding a new resource:

1. Create permissions in `PermissionSeeder.php` using the standard format (e.g., `view_resource`, `create_resource`).
2. Create a Policy class extending `BasePolicy` with resource-specific logic, implementing methods like `viewAny`, `view`, `create`, `update`, `delete`, `restore`, etc.
3. Register the policy in `AuthServiceProvider`.
4. Assign permissions to appropriate roles in `PermissionSeeder.php`.
5. **Controllers (for display)**: If the controller has methods like `index`, `show`, `create`, `edit`, use `$this->authorizeResource()` or `$this->authorize()` to protect these views, leveraging the policy.
6. **Actions (for CUD & tasks)**: For each action (e.g., `CreateResourceAction`, `UpdateResourceAction`), implement an `authorize()` method that uses `$request->user()->can(...)` to check against the corresponding policy method.
7. Write tests covering all policy methods and ensuring actions/controllers correctly respect these policies.
8. Use permission hooks in frontend components as needed (see `applying-permissions.mdc`).
