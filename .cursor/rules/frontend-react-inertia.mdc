---
description: 
globs: 
alwaysApply: true
---
*   **Core:** Utiliser React 19 avec TypeScript (`.tsx`). Composants fonctionnels + Hooks.
*   **React 19 Features:** Exploiter `ref` prop, `use()` (Suspense, Context), Actions, `useActionState`, `useFormStatus`, `useOptimistic`. Rendre les métadonnées (`<title>`) directement ou via `<Head>` d'Inertia.
*   **Inertia.js (`@inertiajs/react`):**
    *   Récupérer les props via `usePage().props`.
    *   Navigation interne via `<Link href={route('...')}>`.
    *   **Layouts:** Utiliser des layouts persistants. Définir un layout différent pour `central` et `tenant` si nécessaire (ex: menus, sidebar dans `app-sidebar.tsx`).
    *   **Formulaires:** Utiliser `useForm` pour la gestion des formulaires et la validation côté serveur. Définir des interfaces TS claires pour les données et props. 
    *  **Prévalidation formulaire** Utiliser des placehoder claires sur les informations attendues et marquer correctement les fields obligatoires, à l'aide d'une étoile rouge après le label
    *   **Validation & Feedback:** Afficher les erreurs avec `<InputError message={errors.field} />`. Utiliser `recentlySuccessful` et `<Transition>` (ou équivalent) pour le feedback utilisateur après soumission.
*   **Structure & Casing:**
    *   Pages Inertia: `resources/js/pages`.
    *   Sous-dossiers par fonctionnalité: `resources/js/pages/{feature_name_lowercase}` (ex: `pages/settings`, `pages/tenants`), the folder name of a ressource is plural for exemple `pages/settings` ou `pages/tenants` ou `pages/vehicles`.
    *   Fichiers de page/composant: `lowercase.tsx` (ex: `profile.tsx`).
    *   Composants Réutilisables: `resources/js/components`.
    *   Composants UI (Shadcn): `resources/js/components/ui`.
    *   Utilise toujours des DataTable, avec toujours une pagination, le sorting (optionnel) et les filtrage de colonne, sur les data table il doit toujours être possible de selectionner les colonnes afficher et leur ordre
    *   Utilise les icones venant de `lucide`
- **Navigation**: 
  - Utiliser `breadcrumbs` pour la navigation contextuelle.
  - Ajouter les entrées de menu dans `app-sidebar.tsx` pour les sections principales / distringuer le menu de l'application centrale et de l'application tenant selon le context des features
*   **State Management:** Principalement via props Inertia et hooks React (`useState`, `useReducer`, `useContext`, `use()`). Pas de librairie externe.
*   **Types d'identifiants:**
    *   Respecter les types d'IDs du backend dans les interfaces TypeScript:
    *   Utiliser `string` pour les identifiants UUIDs (vehicles, devices, tenants...).
    *   Utiliser `number` pour les identifiants auto-incrémentés (brands, models...).
    *   Ne jamais utiliser `toString()` pour les conversions entre ID, maintenir le type approprié.
