---
description: 
globs: *.tsx
alwaysApply: false
---
*   **Core:** Utiliser React 19 avec TypeScript (`.tsx`). Composants fonctionnels + Hooks.
*   **React 19 Features:** Exploiter `ref` prop, `use()` (Suspense, Context), Actions, `useActionState`, `useFormStatus`, `useOptimistic`. Rendre les métadonnées (`<title>`) directement ou via `<Head>` d'Inertia.
*   **Inertia.js (`@inertiajs/react`):**
    *   Récupérer les props via `usePage().props`.
    *   Navigation interne via `<Link href={route('...')}>`.
    *   **Layouts:** Utiliser des layouts persistants. Définir un layout différent pour `central` et `tenant` si nécessaire (ex: menus, sidebar dans `app-sidebar.tsx`).
    *   **Formulaires:** Utiliser `useForm` pour la gestion des formulaires et la validation côté serveur. Définir des interfaces TS claires pour les données et props. 
    *  **Prévalidation formulaire** Utiliser des placehoder claires sur les informations attendues et marquer correctement les fields obligatoires, à l'aide d'une étoile rouge après le label
    *   **Validation & Feedback:** Afficher les erreurs avec `<InputError message={errors.field} />`. Utiliser `recentlySuccessful` et `<Transition>` (ou équivalent) pour le feedback utilisateur après soumission.
*   **Structure & Casing:**
    *   Pages Inertia: `resources/js/pages`.
    *   Sous-dossiers par fonctionnalité: `resources/js/pages/{feature_name_lowercase}` (ex: `pages/settings`, `pages/tenants`), the folder name of a ressource is plural for exemple `pages/settings` ou `pages/tenants` ou `pages/vehicles`.
    *   Fichiers de page/composant: `lowercase.tsx` (ex: `profile.tsx`).
    *   Composants Réutilisables: `resources/js/components`.
    *   Composants UI (Shadcn): `resources/js/components/ui`.
    *   Utilise toujours des DataTable, avec toujours une pagination, le sorting (optionnel) et les filtrage de colonne, sur les data table il doit toujours être possible de selectionner les colonnes afficher et leur ordre
    *   **DataTableRowActions:**
        *   Utiliser le composant `DataTableRowActions` (`components/ui/data-table-row-actions.tsx`) pour les actions contextuelles sur chaque ligne du tableau.
        *   Toujours créer une colonne avec `id: "actions"` à la fin du tableau et utiliser `DataTableRowActions` dans sa cellule.
        *   Utiliser le hook `useStandardActions` depuis `@/utils/actions` pour générer les actions standard (voir, éditer, supprimer, restaurer) avec les vérifications de permissions appropriées.
        *   Exemple d'implémentation:
        ```tsx
        {
          id: "actions",
          cell: ({ row }) => {
            const resource = { ...row.original, resourceName: "resources" };
            
            return (
              <DataTableRowActions
                row={row}
                actions={getStandardActions(resource)}
                menuLabel={__("common.actions_header")}
              />
            );
          },
        }
        ```
        *   Le paramètre `resourceName` doit correspondre au nom de la ressource côté backend pour le routage et les vérifications de permissions.
        *   Pour ajouter des actions personnalisées, utiliser l'option `customActions` de `useStandardActions` ou étendre le tableau d'actions retourné.
    *   Utilise les icones venant de `lucide`
*   **Detail/Show Pages:**
    *   Toujours utiliser le composant `Table` dans une `Card` pour afficher les informations détaillées d'une entité.
    *   Utiliser le composant `FormattedDate` pour tout affichage de dates (avec le format approprié).
    *   Ne pas permettre de modifier le compte utilisateur ou le tenant depuis les pages de détail - ces relations doivent être éditées via les pages dédiées.
    *   Standardiser l'affichage des associations (tenant, device, user) avec des liens cliquables et des icônes appropriées.
    *   Pour les entités supprimées, afficher un badge de statut avec une option de restauration.
*   **Navigation**: 
  - Utiliser `breadcrumbs` pour la navigation contextuelle.
  - Ajouter les entrées de menu dans `app-sidebar.tsx` pour les sections principales / distringuer le menu de l'application centrale et de l'application tenant selon le context des features
*   **State Management:** Principalement via props Inertia et hooks React (`useState`, `useReducer`, `useContext`, `use()`). Pas de librairie externe.
*   **Types d'identifiants:**
    *   Respecter les types d'IDs du backend dans les interfaces TypeScript:
    *   Utiliser `string` pour les identifiants UUIDs (vehicles, devices, tenants...).
    *   Utiliser `number` pour les identifiants auto-incrémentés (brands, models...).
    *   Ne jamais utiliser `toString()` pour les conversions entre ID, maintenir le type approprié.


## TypeScript Definitions for Laravel Resources

Save Workbench includes TypeScript definitions for Laravel API Resources to provide type safety when working with data from the backend.

### Available Resource Types

- `TenantResource`
- `DeviceResource` and `DeviceTypeResource`
- `VehicleResource`, `VehicleModelResource`, `VehicleBrandResource`, and `VehicleTypeResource`
- `ResourceCollection<T>` for paginated collections

### Usage

Import the resource types from the types directory:

```typescript
import { VehicleResource, ResourceCollection } from '@/types';

// For a single resource
interface PageProps {
  vehicle: VehicleResource;
}

// For a paginated collection
interface PageProps {
  vehicles: ResourceCollection<VehicleResource>;
}
```

### Utility Functions

The application provides utility functions in `@/utils/resources` to work with Laravel Resources:

```typescript
import { getData, getPaginationMeta, getPaginationLinks } from '@/utils';

// Get data from a resource or resource collection
const vehicles = getData(props.vehicles);

// Get pagination metadata from a collection
const pagination = getPaginationMeta(props.vehicles);

// Get pagination links from a collection
const links = getPaginationLinks(props.vehicles);
```
