---
description: 
globs: 
alwaysApply: true
---
# Applying Permissions in Save Workbench

This document outlines how to apply permissions to controllers and frontend components using the existing policy and permission infrastructure.

## Backend Permission Model

Save Workbench uses the following authorization components:

1. **Spatie Laravel Permission v6.17+**: For managing roles and permissions in the database
2. **Policies**: Resource-specific classes that implement authorization logic by extending `BasePolicy`
3. **BasePolicy**: A common base class that standardizes permission checks using `$permissionPrefix`
4. **Tenant isolation**: Logic that ensures tenant users only access their tenant's data
5. **Gate Super Admin Override**: Super admins automatically pass all permission checks

## Adding Permissions to Controllers

### Resource Controllers

For standard resource controllers (CRUD operations on a single model), use the `authorizeResource` method in the constructor:

```php
public function __construct()
{
    $this->authorizeResource(ModelName::class, 'route_parameter_name');
}
```

Example for `VehicleController`:

```php
public function __construct()
{
    $this->authorizeResource(Vehicle::class, 'vehicle');
}
```

This automatically maps the following methods to policy actions:

| Controller Method | Policy Method |
|-------------------|---------------|
| index             | viewAny       |
| show              | view          |
| create            | create        |
| store             | create        |
| edit              | update        |
| update            | update        |
| destroy           | delete        |

### Nested Resources or Special Cases

For controllers that manage nested resources (e.g., users within a tenant), use manual authorization:

```php
public function index(Tenant $tenant)
{
    $this->authorize('view_tenant_users');
    
    // Additional tenant checks if needed
    // Ensure user has access to this specific tenant
    // ...
    
    // Controller logic
}
```

### Tenant-Specific Checks

When working with tenant-scoped data, always validate that the user has access to the tenant:

```php
public function show(Tenant $tenant, User $user)
{
    $this->authorize('view_tenant_users');
    
    // Ensure the user belongs to the tenant
    if ($user->tenant_id !== $tenant->id) {
        abort(404);
    }
    
    // Controller logic
}
```

## Adding Permissions to Laravel Actions

### Action Authorization

Each Action class should implement an `authorize` method:

```php
use Lorisleiva\Actions\ActionRequest;

public function authorize(ActionRequest $request, Vehicle $vehicle = null): bool
{
    if ($vehicle) {
        // For update/delete operations
        return $request->user()->can('update', $vehicle);
    }
    
    // For create operations
    return $request->user()->can('create', Vehicle::class);
}
```

The `AsAction` trait automatically calls this method before executing the action.

## Adding Permissions to Frontend Components

### Checking Permissions in React Components

Use the helper functions from `@/utils/permissions`:

```tsx
import { usePermission, useRole, useHasAnyPermission } from '@/utils/permissions';

function MyComponent() {
    // Check a single permission
    const canViewUsers = usePermission('view_users');
    
    // Check for a specific role
    const isSuperAdmin = useRole('super_admin');
    
    // Check for any of multiple permissions
    const canManageUsers = useHasAnyPermission(['create_users', 'edit_users']);
    
    return (
        <div>
            {canViewUsers && <UsersList />}
            
            {canManageUsers && (
                <Button asChild>
                    <Link href={route('users.create')}>
                        {__('users.actions.create')}
                    </Link>
                </Button>
            )}
        </div>
    );
}
```

### Conditional UI Elements

Hide elements that the user doesn't have permission to access:

```tsx
{usePermission('create_users') && (
    <Button asChild>
        <Link href={route('users.create')} className="btn">
            <Plus className="mr-2 h-4 w-4" />
            {__('users.actions.create')}
        </Link>
    </Button>
)}
```

### Tenant-Aware Components

Use the `useTenantUser` helper to check if a user belongs to a tenant:

```tsx
import { useTenantUser } from '@/utils/permissions';

function SidebarMenu() {
    const isTenantUser = useTenantUser();
    
    return (
        <div>
            {!isTenantUser && (
                // Central app menu items
                <MenuItem href={route('tenants.index')}>
                    {__('tenants.title')}
                </MenuItem>
            )}
            
            {isTenantUser && (
                // Tenant-specific menu items
                <MenuItem href={route('vehicles.index')}>
                    {__('vehicles.title')}
                </MenuItem>
            )}
        </div>
    );
}
```

### Data Table Actions

Use the `useStandardActions` utility for common CRUD actions in data tables:

```tsx
import { useStandardActions } from '@/utils/actions';

function VehicleTable() {
    const getStandardActions = useStandardActions({
        resourceName: "vehicles",
        routePrefix: "vehicles", // Optional, for nested routes like "tenants.users"
        additionalParams: {}, // For additional route parameters
    });
    
    const columns = [
        // ... other columns
        {
            id: "actions",
            cell: ({ row }) => (
                <DataTableRowActions 
                    row={row} 
                    actions={getStandardActions(row.original)} 
                />
            ),
        },
    ];
}
```

### Navigation with Permissions

The `useNavItems` hook automatically filters navigation based on permissions:

```tsx
import { useNavItems } from '@/hooks/use-nav-items';

function Sidebar() {
    const { mainNavItems, settingsNavItems } = useNavItems();
    
    return (
        <div>
            {mainNavItems.map(item => (
                <NavItem key={item.href} {...item} />
            ))}
        </div>
    );
}
```

## Creating New Permissions

When adding a new resource to the application:

1. **Add to PermissionSeeder**: Include the resource in the `$resources` array
2. **Create Policy**: Extend `BasePolicy` with the correct `$permissionPrefix`
3. **Register Policy**: Add to `AuthServiceProvider::$policies`
4. **Assign Permissions**: Configure role permissions in `PermissionSeeder`
5. **Controller Authorization**: Use `$this->authorizeResource()` or manual authorization
6. **Action Authorization**: Implement `authorize()` method in Action classes
7. **Frontend Guards**: Use permission hooks in components

Example PermissionSeeder entry:

```php
$resources = [
    'users', 'tenants', 'vehicles', 'devices', 'drivers', 'groups',
    'your_new_resource', // Add your resource here
];
```

Example Policy:

```php
class YourResourcePolicy extends BasePolicy
{
    protected string $permissionPrefix = 'your_new_resource';
    
    // Custom policy methods if needed
    public function customAction(User $user, YourResource $resource): bool
    {
        // Custom logic
        return parent::update($user, $resource);
    }
}
```

## Testing Permissions

Always write tests to verify that your permission system works correctly:

```php
public function test_unauthorized_users_cannot_access_resource()
{
    $user = User::factory()->create();
    $user->assignRole('tenant_viewer');
    
    $response = $this->actingAs($user)->get(route('vehicles.create'));
    
    $response->assertStatus(403);
}

public function test_actions_respect_permissions()
{
    $user = User::factory()->create();
    $user->assignRole('tenant_viewer'); // No create permission
    
    $action = new CreateVehicleAction();
    
    $this->expectException(AuthorizationException::class);
    
    $action->handle($validData);
}
```

## Troubleshooting Permissions

If permissions aren't working as expected:

1. **Check user roles**: Verify the user has the correct role assigned
2. **Verify role permissions**: Ensure the role has the necessary permissions in `PermissionSeeder`
3. **Policy registration**: Confirm the policy is registered in `AuthServiceProvider`
4. **Permission prefix**: Ensure the policy `$permissionPrefix` matches the seeded permissions
5. **Tenant isolation**: Verify tenant-scoping logic is working correctly
6. **Frontend hooks**: Check that permission hooks are properly imported and used
7. **Cache**: Clear permission cache if using cached permissions: `sail artisan permission:cache-reset`
